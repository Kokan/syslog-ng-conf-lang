@version: 3.21

@include "scl.conf"

options {
time-reopen(1);
};


####
##
## Display layer
##
##
####

template "000" "
    |   |  
 -----------
";
template "X00" "
  X |   |  
 -----------
";
template "XO0" "
  X | O |  
 -----------
";
template "XOX" "
  X | O | X
 -----------
";
template "XOO" "
  X | O | O
 -----------
";
template "X0O" "
  X |   | O
 -----------
";
template "XXO" "
  X | X | O
 -----------
";
template "XX0" "
  X | X |  
 -----------
";
template "XXX" "
  X | X | X
 -----------
";
template "0X0" "
    | X |  
 -----------
";
template "OX0" "
  O | X |  
 -----------
";
template "OXO" "
  O | X | O
 -----------
";
template "0XX" "
    | X | X
 -----------
";
template "OXX" "
  O | X | X
 -----------
";
template "O0X" "
  O |   | X
 -----------
";
template "OOX" "
  O |   | X
 -----------
";

template "O00" "
  O |   |  
 -----------
";
template "O0O" "
  O |   | O
 -----------
";
template "OO0" "
  O | O |  
 -----------
";
template "OOO" "
  O | O | O
 -----------
";
template "0O0" "
    | O |  
 -----------
";
template "0OO" "
    | O | O
 -----------
";
template "00O" "
    |   | O
 -----------
";


template "instruction" "Please give your next move: ";

block destination tic-tac-toe-tui(template("$MSG"))
{
   channel {
   rewrite { set("$(substr `template` 0 3)" value(".tictactoe.firstline")); };
   rewrite { set("$(substr `template` 3 3)" value(".tictactoe.secondline")); };
   rewrite { set("$(substr `template` 6 3)" value(".tictactoe.thirdline")); };

   destination {
   file("/dev/stdout" template("$(template ${.tictactoe.firstline})$(template ${.tictactoe.secondline})$(template ${.tictactoe.thirdline}) $(template instruction)\n"));

   file("/dev/stdout" template("$(format-welf --key .tictactoe.*)\n") persist-name("debug"));
   };
   }
};


# User Input

template "A" "1";
template "B" "2";
template "C" "3";

template "a" "1";
template "b" "2";
template "c" "3";

block source tic-tac-toe-input()
{
# Move [ABC][123]
   channel {
     source { stdin(flags(no-parse)); };

     filter { message("([ABCabc])([123])" flags(store-matches)); };

     rewrite {
        set("$(template $1)" value(".tictactoe.input.x"));
        set("$2" value(".tictactoe.input.y"));
        set("1" value(".tictactoe.input"));
     };
   }
};

# initiate state
block source tic-tac-toe-initiate-game-state()
{
   channel {
   source { example-msg-generator( num(1) template("do-not-matter") ); };

   rewrite { set("000000000" value(".tictactoe.state")); };
   }
};

# Moves

template "000000000+11" "XO0000000";
  template "XO0000000+13" "XOX0O0000";
    template "XOX0O0000+21" "XOXXO00O0"; #win O
    template "XOX0O0000+23" "XOX0OX0O0"; #win O
    template "XOX0O0000+31" "XOX0O0XO0"; #win O
    template "XOX0O0000+32" "XOXOO00X0";
      template "XOXOO00X0+23" "XOXOOX0XO"; #draw
      template "XOXOO00X0+31" "XOXOOOXX0"; #win O
      template "XOXOO00X0+33" "XOXOOO0XX"; #win O
    template "XOX0O0000+33" "XOX0O00OX"; #win O
  template "XO0000000+21" "XO0X00O00";
    template "XO0X00O00+13" "XOXX00OO0";
      template "XOXX00OO0+22" "XOXXX0OOO"; #win O
      template "XOXX00OO0+23" "XOXX0XOOO"; #win O
      template "XOXX00OO0+33" "XOXXO0OOX"; #draw
    template "XO0X00O00+22" "XO0XXOO0O";
      template "XO0XXOO0O+13" "XO0XXOO0O";
    template "XO0X00O00+23" "XO0XOXO00";
    template "XO0X00O00+32" "XO0X0OOX0";
    template "XO0X00O00+33" "XO0XO0O0X";
  template "XO0000000+22" "XO00X000O";
  template "XO0000000+23" "XO00OX000";
  template "XO0000000+31" "XO0O00X00";
  template "XO0000000+32" "XO00O00X0";
template "000000000+12" "OX0000000";
template "000000000+13" "0OX000000";
template "000000000+21" "000XO0000";
template "000000000+22" "0O00X0000";
template "000000000+23" "0000OX000";
template "000000000+31" "000000XO0";
template "000000000+32" "000000OX0";
template "000000000+33" "0000000OX";

block parser tic-tac-toe-move()
{
   channel {
     rewrite {
       set("${.tictactoe.state}+${.tictactoe.input.x}${.tictactoe.input.y}" value(".tictactoe.state-change-arg"));
       set("$(template ${.tictactoe.state-change-arg} 999999999)" value(".tictactoe.state"));
     };
   }
};


block source tic-tac-toe-state()
{
   channel {
     source { unix-stream("/tmp/tic-tac-toe.sock" flags(no-parse)); };
     parser { syslog-parser(flags(syslog-protocol)); }; # For some reason this is needed for ewmm-parser()
     parser { ewmm-parser(); };
   }
};



# MAIN

log {
        source { tic-tac-toe-initiate-game-state(); };
        source { tic-tac-toe-input(); };
        source { tic-tac-toe-state(); };

        parser {
          grouping-by(
             key("")
             aggregate(
               value(".pass-throu" "1")
             )

             trigger( match("1", value(".tictactoe.input")) )
             timeout(9999999) #hopefully never
          );
        };

        parser { tic-tac-toe-move(); };

        filter { match("1" value(".pass-throu")); };
        rewrite { set("0" value(".pass-throu")); };
        rewrite { set("0" value(".tictactoe.input")); };
        rewrite { set("0" value("MESSAGE")); };

        destination { tic-tac-toe-tui(template("${.tictactoe.state}")); };
        destination { unix-stream("/tmp/tic-tac-toe.sock" template("$(format-ewmm)")); };
};





