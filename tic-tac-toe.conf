@version: 3.21

@include "scl.conf"

options {
time-reopen(1);
};


####
##
## Display layer
##
##
####

template "000" "
    |   |  
 -----------
";
template "X00" "
  X |   |  
 -----------
";
template "X0X" "
  X |   | X
 -----------
";
template "XO0" "
  X | O |  
 -----------
";
template "XOX" "
  X | O | X
 -----------
";
template "XOO" "
  X | O | O
 -----------
";
template "X0O" "
  X |   | O
 -----------
";
template "XXO" "
  X | X | O
 -----------
";
template "XX0" "
  X | X |  
 -----------
";
template "XXX" "
  X | X | X
 -----------
";
template "0X0" "
    | X |  
 -----------
";
template "OX0" "
  O | X |  
 -----------
";
template "OXO" "
  O | X | O
 -----------
";
template "0XX" "
    | X | X
 -----------
";
template "OXX" "
  O | X | X
 -----------
";
template "O0X" "
  O |   | X
 -----------
";
template "OOX" "
  O |   | X
 -----------
";

template "O00" "
  O |   |  
 -----------
";
template "O0O" "
  O |   | O
 -----------
";
template "OO0" "
  O | O |  
 -----------
";
template "OOO" "
  O | O | O
 -----------
";
template "0O0" "
    | O |  
 -----------
";
template "0OO" "
    | O | O
 -----------
";
template "00O" "
    |   | O
 -----------
";


template "instruction" "Please give your next move: ";

block destination tic-tac-toe-tui(template("$MSG"))
{
   channel {
   rewrite { set("$(substr `template` 0 3)" value(".tictactoe.firstline")); };
   rewrite { set("$(substr `template` 3 3)" value(".tictactoe.secondline")); };
   rewrite { set("$(substr `template` 6 3)" value(".tictactoe.thirdline")); };

   destination {
   file("/dev/stdout" template("$(template ${.tictactoe.firstline})$(template ${.tictactoe.secondline})$(template ${.tictactoe.thirdline}) $(template instruction)\n"));

   file("/dev/stdout" template("$(format-welf --key .tictactoe.*)\n") persist-name("debug"));
   };
   }
};


# User Input

template "A" "1";
template "B" "2";
template "C" "3";

template "a" "1";
template "b" "2";
template "c" "3";

block source tic-tac-toe-input()
{
# Move [ABC][123]
   channel {
     source { stdin(flags(no-parse)); };

     filter { message("([ABCabc])([123])" flags(store-matches)); };

     rewrite {
        set("$(template $1)" value(".tictactoe.input.x"));
        set("$2" value(".tictactoe.input.y"));
        set("1" value(".tictactoe.input"));
     };
   }
};

template "gamestart" "Tic-Tac-Toe\nYou are with O, please provide a step (eg.: b3):";

# initiate state
block source tic-tac-toe-initiate-game-state()
{
   channel {
   source { example-msg-generator( num(1) template("do-not-matter") ); };

   rewrite { set("X00000000" value(".tictactoe.state")); };
   destination {
   file("/dev/stdout" template("$(template X00)$(template 000)$(template 000) $(template gamestart)\n") persist-name("init"));
   };

   }
};

# Moves

template "X00000000+12" "XO0X00000";
	template "XO0X00000+13" "XOOX00X00"; #X win
	template "XO0X00000+22" "XO0XO0X00"; #X win
	template "XO0X00000+23" "XO0X0OX00"; #x win
	template "XO0X00000+32" "XO0X00XO0"; #x win
	template "XO0X00000+33" "XO0X00X0O"; #x win
	template "XO0X00000+31" "XO0XX0O00";
		template "XO0XX0O00+13" "XOOXXXO00"; #x win
		template "XO0XX0O00+23" "XO0XXOO0X"; #x win
		template "XO0XX0O00+32" "XOOXXXOOO"; #x win
		template "XO0XX0O00+33" "XO0XXXO0O"; #x win
template "X00000000+13" "X0OX00000";
	template "X0OX00000+12" "XOOX00X00"; #x win
	template "X0OX00000+22" "X0OXO0X00"; #x win
	template "X0OX00000+23" "X0OX0OX00"; #x win
	template "X0OX00000+32" "X0OX00XO0"; #x win
	template "X0OX00000+33" "X0OX00X0O"; #x win
	template "X0OX00000+31" "X0OXX0O00";
		template "X0OXX0O00+12" "XOOXXXO00"; #x win
		template "X0OXX0O00+23" "X0OXXOO0X"; #x win
		template "X0OXX0O00+32" "X0OXXXOO0"; #x win
		template "X0OXX0O00+33" "X0OXXXO0O"; #x win
template "X00000000+21" "XX0O00000";
	template "XX0O00000+22" "XXXOO0000"; #x win
	template "XX0O00000+23" "XXXO0O000"; #x win
	template "XX0O00000+31" "XXXO00O00"; #x win
	template "XX0O00000+32" "XXXO000O0"; #x win
	template "XX0O00000+33" "XX0O0000O"; #x win
	template "XX0O00000+13" "XXOOX0000";
		template "XXOOX0000+23" "XXOOXO00X"; #x win
		template "XXOOX0000+31" "XXOOX0O0X"; #x win
		template "XXOOX0000+32" "XXOOX00OX"; #x win
		template "XXOOX0000+33" "XXOOX00XO"; #x win
template "X00000000+22" "XX00O0000";
	template "XX00O0000+21" "XXXOO0000"; #x win
	template "XX00O0000+23" "XXX0OO000"; #x win
	template "XX00O0000+31" "XXX0O0O00"; #x win
	template "XX00O0000+32" "XXX0O00O0"; #x win
	template "XX00O0000+33" "XXX0O000O"; #x win
	template "XX00O0000+13" "XXO0O0X00";
		template "XXO0O0X00+23" "XXOXOOX00"; #x win
		template "XXO0O0X00+32" "XXOXO0XO0"; #x win
		template "XXO0O0X00+33" "XXOXO0X0O"; #x win
		template "XXO0O0X00+21" "XXOOOXX00"; # tie
template "X00000000+23" "X000XO000";
	template "X000XO000+12" "XO00XO00X"; #x win
	template "X000XO000+13" "X0O0XO00X"; #x win
	template "X000XO000+21" "X00OXO00X"; #x win
	template "X000XO000+31" "X000XOO0X"; #x win
	template "X000XO000+32" "X000XO0OX"; #x win
	template "X000XO000+33" "X0X0XO00O";
		template "X0X0XO00O+21" "XXXOXO00O"; #x win
		template "X0X0XO00O+31" "XXX0XOO0O"; #x win
		template "X0X0XO00O+32" "XXX0XO0OO"; #x win
		template "X0X0XO00O+12" "XOX0XOX0O"; #x win
template "X00000000+31" "XX0000O00";
	template "XX0000O00+21" "XXXO00O00"; #x win
	template "XX0000O00+22" "XXX0O0O00"; #x win
	template "XX0000O00+23" "XXX00OO00"; #x win
	template "XX0000O00+32" "XXX000OO0"; #x win
	template "XX0000O00+33" "XXX000O0O"; #x win
	template "XX0000O00+13" "XXO0X0O00";
		template "XXO0X0O00+21" "XXOOX0O0X"; #x win
		template "XXO0X0O00+23" "XXO0XOO0X"; #x win
		template "XXO0X0O00+32" "XXO0X0OOX"; #x win
		template "XXO0X0O00+33" "XXO0X0OXO"; #x win
template "X00000000+32" "X0X0000O0";
	template "X0X0000O0+21" "XXXO000O0"; #x win
	template "X0X0000O0+22" "XXX0O00O0"; #x win
	template "X0X0000O0+23" "XXX00O0O0"; #x win
	template "X0X0000O0+31" "XXX000OO0"; #x win
	template "X0X0000O0+33" "XXX0000OO"; #x win
	template "X0X0000O0+12" "XOX0X00O0";
		template "XOX0X00O0+21" "XOX0X00OX"; #x win
		template "XOX0X00O0+23" "XOX0X00OX"; #x win
		template "XOX0X00O0+31" "XOX0X00OX"; #x win
		template "XOX0X00O0+33" "XOX0X0XOO"; #x win
template "X00000000+33" "X0X00000O";
	template "X0X00000O+21" "XXX00000O"; #x win
	template "X0X00000O+22" "XXX00000O"; #x win
	template "X0X00000O+23" "XXX00000O"; #x win
	template "X0X00000O+31" "XXX00000O"; #x win
	template "X0X00000O+32" "XXX00000O"; #x win
	template "X0X00000O+12" "XOX000X0O";
		template "XOX000X0O+21" "XOXOX0X0O"; #x win
		template "XOX000X0O+22" "XOXXO0X0O"; #x win
		template "XOX000X0O+23" "XOXX0OX0O"; #x win
		template "XOX000X0O+32" "XOXX00XOO"; #x win

block parser tic-tac-toe-move()
{
   channel {
     rewrite {
       set("${.tictactoe.state}+${.tictactoe.input.x}${.tictactoe.input.y}" value(".tictactoe.state-change-arg"));
       set("$(template ${.tictactoe.state-change-arg} 999999999)" value(".tictactoe.state"));
     };
   }
};


block source tic-tac-toe-state()
{
   channel {
     source { unix-stream("/tmp/tic-tac-toe.sock" flags(no-parse)); };
     parser { syslog-parser(flags(syslog-protocol)); }; # For some reason this is needed for ewmm-parser()
     parser { ewmm-parser(); };
   }
};



# MAIN

log {
        source { tic-tac-toe-initiate-game-state(); };
        source { tic-tac-toe-input(); };
        source { tic-tac-toe-state(); };

        parser {
          grouping-by(
             key("")
             aggregate(
               value(".pass-throu" "1")
             )

             trigger( match("1", value(".tictactoe.input")) )
             timeout(9999999) #hopefully never
          );
        };

        parser { tic-tac-toe-move(); };

        filter { match("1" value(".pass-throu")); };
        rewrite { set("0" value(".pass-throu")); };
        rewrite { set("0" value(".tictactoe.input")); };
        rewrite { set("0" value("MESSAGE")); };

        destination { tic-tac-toe-tui(template("${.tictactoe.state}")); };
        destination { unix-stream("/tmp/tic-tac-toe.sock" template("$(format-ewmm)")); };
};





